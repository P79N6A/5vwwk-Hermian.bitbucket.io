{"author":{"name":"Nick Fisher"},"name":"deepmerge","description":"A library for deep (recursive) merging of Javascript objects","keywords":["merge","deep","extend","copy","clone","recursive"],"version":"1.5.2","homepage":"https://github.com/KyleAMathews/deepmerge","repository":{"type":"git","url":"git://github.com/KyleAMathews/deepmerge.git"},"main":"dist/umd.js","module":"dist/es.js","browser":"dist/cjs.js","engines":{"node":">=0.10.0"},"scripts":{"build":"rollup -c","test":"npm run build && tap test/*.js && jsmd README.markdown"},"devDependencies":{"is-mergeable-object":"1.1.0","jsmd":"0.3.1","rollup":"0.49.3","rollup-plugin-commonjs":"8.2.1","rollup-plugin-node-resolve":"3.0.0","tap":"~7.1.2"},"license":"MIT","readme":"deepmerge\n=========\n\n> ~540B gzipped, ~1.1kB minified\n\nMerge the enumerable attributes of two objects deeply.\n\nthe future\n----------\n\nShould we publish a version 2?  [Give your opinion.](https://github.com/KyleAMathews/deepmerge/issues/72)\n\nexample\n=======\n\n<!--js\nvar merge = require('./')\n-->\n\n```js\nvar x = {\n    foo: { bar: 3 },\n    array: [{\n        does: 'work',\n        too: [ 1, 2, 3 ]\n    }]\n}\n\nvar y = {\n    foo: { baz: 4 },\n    quux: 5,\n    array: [{\n        does: 'work',\n        too: [ 4, 5, 6 ]\n    }, {\n        really: 'yes'\n    }]\n}\n\nvar expected = {\n    foo: {\n        bar: 3,\n        baz: 4\n    },\n    array: [{\n        does: 'work',\n        too: [ 1, 2, 3, 4, 5, 6 ]\n    }, {\n        really: 'yes'\n    }],\n    quux: 5\n}\n\nmerge(x, y) // => expected\n```\n\nmethods\n=======\n\n```\nvar merge = require('deepmerge')\n```\n\nmerge(x, y, [options])\n-----------\n\nMerge two objects `x` and `y` deeply, returning a new merged object with the\nelements from both `x` and `y`.\n\nIf an element at the same key is present for both `x` and `y`, the value from\n`y` will appear in the result.\n\nMerging creates a new object, so that neither `x` or `y` are be modified.  However, child objects on `x` or `y` are copied over - if you want to copy all values, you must pass `true` to the clone option.\n\nmerge.all(arrayOfObjects, [options])\n-----------\n\nMerges two or more objects into a single result object.\n\n```js\nvar x = { foo: { bar: 3 } }\nvar y = { foo: { baz: 4 } }\nvar z = { bar: 'yay!' }\n\nvar expected = { foo: { bar: 3, baz: 4 }, bar: 'yay!' }\n\nmerge.all([x, y, z]) // => expected\n```\n\n### options\n\n#### arrayMerge\n\nThe merge will also merge arrays and array values by default.  However, there are nigh-infinite valid ways to merge arrays, and you may want to supply your own.  You can do this by passing an `arrayMerge` function as an option.\n\n```js\nfunction concatMerge(destinationArray, sourceArray, options) {\n\tdestinationArray // => [1, 2, 3]\n\tsourceArray // => [3, 2, 1]\n\toptions // => { arrayMerge: concatMerge }\n\treturn destinationArray.concat(sourceArray)\n}\nmerge([1, 2, 3], [3, 2, 1], { arrayMerge: concatMerge }) // => [1, 2, 3, 3, 2, 1]\n```\n\nTo prevent arrays from being merged:\n\n```js\nconst dontMerge = (destination, source) => source\nconst output = merge({ coolThing: [1,2,3] }, { coolThing: ['a', 'b', 'c'] }, { arrayMerge: dontMerge })\noutput // => { coolThing: ['a', 'b', 'c'] }\n```\n\n#### clone\n\nDefaults to `false`.  If `clone` is `true` then both `x` and `y` are recursively cloned as part of the merge.\n\ninstall\n=======\n\nWith [npm](http://npmjs.org) do:\n\n```sh\nnpm install deepmerge\n```\n\nJust want to download the file without using any package managers/bundlers?  [Download the UMD version from unpkg.com](https://unpkg.com/deepmerge/dist/umd.js).\n\ntest\n====\n\nWith [npm](http://npmjs.org) do:\n\n```sh\nnpm test\n```\n\nlicense\n=======\n\nMIT\n","readmeFilename":"README.markdown","bugs":{"url":"https://github.com/KyleAMathews/deepmerge/issues"},"_id":"deepmerge@1.5.2","_shasum":"10499d868844cdad4fee0842df8c7f6f0c95a753","_resolved":"https://registry.npmjs.org/deepmerge/-/deepmerge-1.5.2.tgz","_from":"https://registry.npmjs.org/deepmerge/-/deepmerge-1.5.2.tgz"}