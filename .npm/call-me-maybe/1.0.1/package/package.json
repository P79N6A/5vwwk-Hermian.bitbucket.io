{"name":"call-me-maybe","version":"1.0.1","description":"Let your JS API users either give you a callback or receive a promise","main":"index.js","dependencies":{},"devDependencies":{"mocha":"^2.3.2","promise":"^7.0.4","zuul":"^3.4.0"},"scripts":{"test":"mocha"},"repository":{"type":"git","url":"git+https://github.com/limulus/call-me-maybe.git"},"keywords":["promise","callback","denodeify","promisify","carlyraejepsen"],"author":{"name":"Eric McCarthy","email":"eric@limulus.net","url":"http://www.limulus.net/"},"license":"MIT","bugs":{"url":"https://github.com/limulus/call-me-maybe/issues"},"homepage":"https://github.com/limulus/call-me-maybe#readme","readme":"# call-me-maybe [![Build Status](https://travis-ci.org/limulus/call-me-maybe.svg?branch=master)](https://travis-ci.org/limulus/call-me-maybe)\n\nLet your JS API users either give you a callback or receive a promise.\n\n## Usage\n\n```javascript\nvar maybe = require(\"call-me-maybe\")\n\nmodule.exports = function asyncFunc (cb) {\n  return maybe(cb, new Promise(function(resolve, reject) {\n    // ...\n  }))\n}\n```\n\n## API\n\n### maybe(cb, promise)\n\nIf the callback `cb` is truthy, returns `undefined` and will call `cb` when `promise` is settled. The parameters passed to `cb` are standard error-first:\n\n  - If `promise` is fulfilled, then it is called with the result of the promise: `cb(null, result)`\n  - If `promise` is rejected, then it is called with the rejection error: `cb(err)`\n\nIf `cb` is falsey, then `promise` is retuned.\n","readmeFilename":"README.md","_id":"call-me-maybe@1.0.1","_shasum":"26d208ea89e37b5cbde60250a15f031c16a4d66b","_resolved":"https://registry.npmjs.org/call-me-maybe/-/call-me-maybe-1.0.1.tgz","_from":"https://registry.npmjs.org/call-me-maybe/-/call-me-maybe-1.0.1.tgz"}