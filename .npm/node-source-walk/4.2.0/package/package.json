{"name":"node-source-walk","version":"4.2.0","description":"Execute a callback on every node of a source code's AST and stop walking when you see fit","main":"index.js","scripts":{"test":"jscs index.js test && mocha test/test.js"},"repository":{"type":"git","url":"git+https://github.com/mrjoelkemp/node-source-walk.git"},"keywords":["ast","traversal","acorn","static analysis","source code","walker","jsx"],"author":{"name":"Joel Kemp","email":"joel@mrjoelkemp.com","url":"http://www.mrjoelkemp.com/"},"license":"MIT","bugs":{"url":"https://github.com/mrjoelkemp/node-source-walk/issues"},"homepage":"https://github.com/mrjoelkemp/node-source-walk","dependencies":{"@babel/parser":"^7.0.0"},"engines":{"node":">=6.0"},"devDependencies":{"jscs":"~2.4.0","jscs-preset-mrjoelkemp":"~1.0.0","mocha":"^5.2.0","sinon":"^6.1.5"},"readme":"### node-source-walk [![npm](http://img.shields.io/npm/v/node-source-walk.svg)](https://npmjs.org/package/node-source-walk) [![npm](http://img.shields.io/npm/dm/node-source-walk.svg)](https://npmjs.org/package/node-source-walk)\n\n> Synchronously execute a callback on every node of a file's AST and stop walking whenever you see fit.\n\n`npm install --save node-source-walk`\n\n### Usage\n\n```javascript\n  var Walker = require('node-source-walk');\n\n  var walker = new Walker();\n\n  // Assume src is the string contents of myfile.js\n  // or the AST of an outside parse of myfile.js\n\n  walker.walk(src, function(node) {\n    if (node.type === whateverImLookingFor) {\n      // No need to keep traversing since we found what we wanted\n      walker.stopWalking();\n    }\n  });\n\n```\n\nBy default, Walker will use `babylon` (supporting ES6, JSX, Flow, and all other available babylon plugins) and the `sourceType: module`, but you can change any of the defaults as follows:\n\n```js\nvar walker = new Walker({\n  sourceType: 'script',\n  // If you don't like experimental plugins\n  plugins: [\n    'jsx',\n    'flow'\n  ]\n});\n```\n\n* The supplied options are passed through to the parser, so you can configure it according to babylon's documentation: https://github.com/babel/babylon\n\n### Swap out the parser\n\nIf you want to supply your own parser, you can do:\n\n```js\nvar walker = new Walker({\n  parser: mySweetParser\n});\n```\n\n* The custom parser must have a `.parse` method that takes in a string and returns an object/AST.\n* All of the other options supplied to the Walker constructor will be passed along as parser options to your chosen parser.\n\n### Public Members\n\n`walk(src, cb)`\n\n* Recursively walks the given `src` from top to bottom\n* `src`: the contents of a file **OR** its (already parsed) AST\n* `cb`: a function that is called for every visited node.\n * The argument passed to `cb` will be the currently visited node.\n\n`moonwalk(node, cb)`\n\n* Recursively walks up an AST starting from the given node. This is a traversal that's in the opposite direction of `walk` and `traverse`.\n* `node`: a valid AST node\n* `cb`: a function that is called for every node (specifically via visiting the parent(s) of every node recursively).\n * The argument passed to `cb` will be the currently visited node.\n\n`stopWalking()`\n\n* Halts further walking of the AST until another manual call of `walk` or `moonwalk`.\n* This is super-beneficial when dealing with large source files (or ASTs)\n\n`traverse(node, cb)`\n\n* Allows you to traverse an AST node and execute a callback on it\n* Callback should expect the first argument to be an AST node, similar to `walk`'s callback.\n\n`parse(src)`\n\n* Uses the options supplied to Walker to parse the given source code string and return its AST\nusing the configured parser (or babylon by default).\n\n## License\n\nMIT\n","readmeFilename":"Readme.md","_id":"node-source-walk@4.2.0","_shasum":"c2efe731ea8ba9c03c562aa0a9d984e54f27bc2c","_resolved":"https://registry.npmjs.org/node-source-walk/-/node-source-walk-4.2.0.tgz","_from":"https://registry.npmjs.org/node-source-walk/-/node-source-walk-4.2.0.tgz"}