{"name":"flatted","version":"2.0.0","description":"A super light and fast circular JSON parser.","unpkg":"min.js","main":"cjs/index.js","module":"esm/index.js","types":"types.d.ts","scripts":{"bench":"node test/bench.js","build":"npm run cjs && npm test && npm run esm && npm run min && npm run size","coveralls":"cat ./coverage/lcov.info | coveralls","cjs":"cp index.js cjs/index.js; echo 'module.exports = Flatted;' >> cjs/index.js","esm":"cp index.js esm/index.js; echo 'export default Flatted;' >> esm/index.js; echo 'export const parse = Flatted.parse;' >> esm/index.js; echo 'export const stringify = Flatted.stringify;' >> esm/index.js","min":"echo '/*! (c) 2018, Andrea Giammarchi, (ISC) */'>min.js && uglifyjs index.js --support-ie8 -c -m >> min.js","size":"cat index.js | wc -c;cat min.js | wc -c;gzip -c9 min.js | wc -c;cat min.js | brotli | wc -c","test":"istanbul cover test/index.js"},"repository":{"type":"git","url":"git+https://github.com/WebReflection/flatted.git"},"keywords":["circular","JSON","fast","parser","minimal"],"author":{"name":"Andrea Giammarchi"},"license":"ISC","bugs":{"url":"https://github.com/WebReflection/flatted/issues"},"homepage":"https://github.com/WebReflection/flatted#readme","devDependencies":{"circular-json":"latest","circular-json-es6":"latest","coveralls":"latest","istanbul":"latest","jsan":"latest","uglify-js":"latest"},"readme":"# flatted\n\n![Downloads](https://img.shields.io/npm/dm/flatted.svg) [![Coverage Status](https://coveralls.io/repos/github/WebReflection/flatted/badge.svg?branch=master)](https://coveralls.io/github/WebReflection/flatted?branch=master) [![Build Status](https://travis-ci.org/WebReflection/flatted.svg?branch=master)](https://travis-ci.org/WebReflection/flatted) [![License: ISC](https://img.shields.io/badge/License-ISC-yellow.svg)](https://opensource.org/licenses/ISC) ![WebReflection status](https://offline.report/status/webreflection.svg)\n\nA super light (0.5K) and fast circular JSON parser, directly from the creator of [CircularJSON](https://github.com/WebReflection/circular-json/#circularjson).\n\nUsable via [CDN](https://unpkg.com/flatted) or as regular module.\n\n```js\n// ESM\nimport {parse, stringify} from 'flatted/esm';\n\n// CJS\nconst {parse, stringify} = require('flatted/cjs');\n\nconst a = [{}];\na[0].a = a;\na.push(a);\n\nstringify(a); // [[\"1\",\"0\"],{\"a\":\"0\"}]\n```\n\n### New in V1: Exact same JSON API\n\n  * Added a [reviver](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse#Syntax) parameter to `.parse(string, reviver)` and revive your own objects.\n  * Added a [replacer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Syntax) and a `space` parameter to `.stringify(object, replacer, space)` for feature parity with JSON signature.\n\n\n### Compatibility\nAll ECMAScript engines compatible with `Map`, `Set`, `Object.keys`, and `Array.prototype.reduce` will work, even if polyfilled.\n\n\n### How does it work ?\nWhile stringifying, all Objects, including Arrays, and strings, are flattened out and replaced as unique index. `*`\n\nOnce parsed, all indexes will be replaced through the flattened collection.\n\n<sup><sub>`*` represented as string to avoid conflicts with numbers</sub></sup>\n\n```js\n// logic example\nvar a = [{one: 1}, {two: '2'}];\na[0].a = a;\n// a is the main object, will be at index '0'\n// {one: 1} is the second object, index '1'\n// {two: '2'} the third, in '2', and it has a string\n// which will be found at index '3'\n\nFlatted.stringify(a);\n// [[\"1\",\"2\"],{\"one\":1,\"a\":\"0\"},{\"two\":\"3\"},\"2\"]\n// a[one,two]    {one: 1, a}    {two: '2'}  '2'\n```\n","readmeFilename":"README.md","_id":"flatted@2.0.0","_shasum":"55122b6536ea496b4b44893ee2608141d10d9916","_resolved":"https://registry.npmjs.org/flatted/-/flatted-2.0.0.tgz","_from":"https://registry.npmjs.org/flatted/-/flatted-2.0.0.tgz"}