{"name":"netlify-dev-plugin","description":"Netlify development tools plugin","version":"1.0.19","author":{"name":"David Calavera @calavera"},"bugs":{"url":"https://github.com/netlify/netlify-dev-plugin/issues"},"dependencies":{"@netlify/cli-utils":"^1.0.1","@netlify/rules-proxy":"^0.1.3","@netlify/zip-it-and-ship-it":"^0.3.0","@oclif/command":"^1","@oclif/config":"^1","ascii-table":"0.0.9","body-parser":"^1.18.3","boxen":"^3.0.0","chalk":"^2.4.2","chokidar":"^2.1.5","copy-template-dir":"^1.4.0","debug":"^4.1.1","npm-packlist":"^1.4.1","precinct":"^6.1.2","read-pkg-up":"^5.0.0","require-package-name":"^2.0.1","execa":"^1.0.0","express":"^4.16.4","express-logging":"^1.1.1","fs-extra":"^7.0.1","fuzzy":"^0.1.3","get-port":"^4.2.0","gh-release-fetch":"^1.0.3","http-proxy":"^1.17.0","inquirer":"^6.2.2","inquirer-autocomplete-prompt":"^1.0.1","jwt-decode":"^2.2.0","netlify":"2.4.1","netlify-cli-logo":"^1.0.0","node-fetch":"^2.3.0","ora":"^3.4.0","resolve":"^1.10.0","safe-join":"^0.1.2","static-server":"^2.2.1","wait-port":"^0.2.2","wrap-ansi":"^5.1.0"},"devDependencies":{"@oclif/dev-cli":"^1","@oclif/plugin-help":"^2","@oclif/test":"^1","auto-changelog":"^1.12.0","chai":"^4","dependency-check":"^3.3.0","eslint":"^5.5","eslint-config-oclif":"^3.1","eslint-config-prettier":"^4.1.0","eslint-plugin-prettier":"^3.0.1","gh-release":"^3.5.0","globby":"^8","mocha":"^5","nock":"^10.0.6","npm-run-all":"^4.1.5","nyc":"^13","prettier":"^1.16.4"},"engines":{"node":">=8.3.0"},"files":["/npm-shrinkwrap.json","/oclif.manifest.json","/src","/yarn.lock"],"homepage":"https://github.com/netlify/netlify-dev-plugin","keywords":["oclif-plugin"],"license":"MIT","oclif":{"commands":"./src/commands","bin":"netlify","devPlugins":["@oclif/plugin-help"]},"repository":{"type":"git","url":"git+https://github.com/netlify/netlify-dev-plugin.git"},"scripts":{"format":"npm run format:prettier -- --write","format:prettier":"prettier \"{{src,test}/**/,}*.js\"","postpack":"rm -f oclif.manifest.json","posttest":"eslint .","prepack":"oclif-dev manifest && oclif-dev readme","prepublishOnly":"git push && git push --tags && gh-release","test":"run-s test:*","test:deps":"dependency-check ./package.json --entry \"src/commands/**/!(*.test).js\" --unused --missing --no-dev --no-peer -i @oclif/plugin-not-found -i @oclif/config -i @oclif/plugin-help -i @oclif/plugin-plugins","test-skip:mocha":"nyc mocha --forbid-only \"test/**/*.test.js\"","version":"oclif-dev readme && auto-changelog -p --template keepachangelog && git add README.md CHANGELOG.md"},"readme":"# netlify-dev-plugin\n\nNetlify CLI plugin for local dev experience. [If you're interested to work on Netlify Dev and other product initatives fulltime, we are hiring.](https://boards.greenhouse.io/netlify/jobs/4215780002)\n\n## What is Netlify Dev?\n\n<div align=\"center\">\n  <h3>Watch the introduction (24 minutes)</h3>\n  <a href=\"https://youtu.be/RL_gtVZ_79Q?t=812\">\n    <img src=\"http://i3.ytimg.com/vi/RL_gtVZ_79Q/hqdefault.jpg\" alt=\"link to netlify dev talk\" />\n  </a>\n</div>\n\nNetlify Dev brings the power of Netlify's Edge Logic layer, [serverless functions](#netlify-functions) and [add-on ecosystem](#using-add-ons) to your local machine. It runs Netlify's production routing engine in a local dev server to make all redirects, proxy rules, function routes or add-on routes available locally and injects the correct environment variables from your site environment, installed add-ons or your netlify.toml file into your build and function environment.\n\n```\n                            ┌───────────────┐                     \n                            │   Project     │                     \n                            │               │                     \n                            └localhost:5000─┘                     \n                                    │                             \n                                    │                             \n       ┌──────────┐                 │                             \n       │  Addons  ├────┐            ▼                             \n       └──────────┘    │    ┌localhost:5000─┐     ┌──────────────┐\n       ┌──────────┐    └───▶│               │     │              │\n       │functions ├────────▶│    Netlify    │     │   Browser    │\n       └──────────┘    ┌───▶│      Dev      │     │              │\n       ┌──────────┐    │    │               │     │              │\n       │_redirects│────┘    └──localhost:8888───▶ localhost:8888─┘\n       └──────────┘                                               \n```\n\nWith project detectors, it automatically detects common tools like Gatsby, Hugo, React Static, Eleventy, and more, to give a zero config setup for your local dev server and can help scaffolding new functions as you work on them. Read our blogpost for [more on detectors and how you can contribute](https://www.netlify.com/blog/2019/04/24/zero-config-yet-technology-agnostic-how-netlify-dev-detectors-work/)!\n\n## Prerequisites\n\n- You should have the latest Netlify CLI version. Run `npm install -g netlify-cli` to be sure.\n- You should be [logged in on Netlify CLI](https://www.netlify.com/docs/cli/#authentication)\n- Your project should be linked to a `siteID` on Netlify (using [netlify init](https://www.netlify.com/docs/cli/#continuous-deployment) or [netlify link](https://www.netlify.com/docs/cli/#linking-and-unlinking-sites)). You can confirm this has been done if you have a `.netlify` folder with a `state.json` file containing your `siteID`.\n\nThis is how we pull down your build environment variables and manage your addons on your local machine.\n\n## Usage\n\n- `netlify dev` start a local dev server for the build tool you're using\n- `netlify dev:exec <command>` runs a shell command within the netlify dev environment\n- `netlify functions:create` bootstrap a new function\n\n<details>\n<summary>\n<b>Pro tip: Aliasing commands</b>\n</summary>\n\nAs these commands are expected to be frequently used, it may be helpful to define aliases in your terminal (Mac: [bash](https://jonsuh.com/blog/bash-command-line-shortcuts/), [zsh](https://askubuntu.com/questions/758496/how-to-make-a-permanent-alias-in-oh-my-zsh), Windows: [doskey](https://stackoverflow.com/questions/20530996/aliases-in-windows-command-prompt), [registry](https://stackoverflow.com/questions/20530996/aliases-in-windows-command-prompt)) to your personal preference. For example:\n\n```bash\n## ~/.zshrc\nalias ndeploy=\"netlify deploy --prod\"\nalias nd=\"netlify dev\"\nalias ndl=\"netlify dev --live\"\nalias nfc=\"netlify functions:create\"\nalias ndx=\"netlify dev:exec \"\n```\n\n</details>\n\n## Netlify Dev usage\n\n```bash\nUSAGE\n  $ netlify dev\n\nOPTIONS\n  -c, --command=command      command to run\n  -f, --functions=functions  Specify a functions folder to serve\n  -o, --offline              disables any features that require network access\n  -p, --port=port            Specify port of netlify dev\n  -l, --live                 Start a public live session\n\nDESCRIPTION\n  The dev command will run a local dev server with Netlify's Edge Logic proxies and redirects, serverless functions, and addons\n\nEXAMPLES\n  $ netlify dev\n  $ netlify dev -c \"yarn start\"\n  $ netlify dev -c hugo\n\nCOMMANDS\n  dev:exec  Exec command\n```\n\n## Live Share\n\nTo share your ongoing dev session with a coworker, just run Netlify Dev with a `--live` flag:\n\n```bash\nnetlify dev --live\n```\n\nYou will get a URL that looks like `https://clever-cray-2aa156-6639f3.netlify.live/`. This can be accessed by anyone as long as you keep your session open.\n\n> Note: there are currently known issues with ending the live session alongside your webdevserver, as well as with live reloading. We are working on fixing it, and would appreciate repro cases. In the mean time you can run `ps aux | grep live-tunnel` and kill these sessions manually.\n\n## Project detection\n\nNetlify Dev will attempt to detect the SSG or build command that you are using, and run these on your behalf, while adding other development utilities. If you have a JavaScript project, it looks for the best `package.json` script to run for you, using simple heuristics, so you can use the full flexibility of npm scripts. We may add more intelligence to this in future.\n\n**Overriding the detectors**: The number of [project types which Netlify Dev can detect](https://github.com/netlify/netlify-dev-plugin/tree/master/src/detectors) is growing, but if yours is not yet supported (contributions welcome!), you can instruct Netlify Dev to run the project on your behalf by declaring it in a `[dev]` block of your `netlify.toml` file.\n\n```toml\n# sample dev block in the toml\n# note: each of these fields are OPTIONAL and should only be used if you need an override\n[dev]\n  command = \"yarn start\" # Command to start your dev server\n  port = 3000 # Port that the dev server will be listening on\n  publish = \"dist\" # If you use a _redirect file, provide the path to your static content folder\n```\n\n<details>\n<summary>\n<b>Explanation of ports in Netlify Dev</b>\n</summary>\n\nThere will be a number of ports that you will encounter when using Netlify Dev, especially when running a static site generator like Gatsby which has its own dev server. All the port numbers can be a bit confusing, so here is a brief explainer.\n\n- If your SSG has a devserver on port 8000 for example, Netlify Dev needs to be told to proxy that port so it can merge it in with the rest of the local Netlify environment (say, running on port 8888), which is what you want to get the full Netlify Dev experience with Functions, Redirects, and so on.\n- If you're running a project we have a detector for, we hardcode those conventional ports so you don't have to supply it yourself. If we have multiple detectors that match, we'll ask you to choose.\n- However, sometimes you're using some other project (we welcome contributions for detectors!) or just have a custom port you want Netlify Dev to point to for some reason. This is when you go to the `netlify.toml` `[dev]` block to specify exactly what port we should listen to.\n\nAs for which port to use while doing local development in Netlify Dev, always look for this box in your console output and use that:\n\n```bash\n   ┌──────────────────────────────────────────────────────────────┐\n   │                                                              │\n   │   [Netlify Dev] Server now ready on http://localhost:64939   │\n   │                                                              │\n   └──────────────────────────────────────────────────────────────┘\n```\n\n</details>\n\n## Redirects\n\nNetlify Dev has the ability emulate the [redirect capability](https://www.netlify.com/docs/redirects/) Netlify provide on the [ADN](https://netlify.com/features/adn) in your local environment. The same redirect rules which you configure to run on the edge, will also work in your local builds.\n\nNetlify dev supports redirect rules defined in either `_redirects` or `netlify.toml` files.\n\nThe order of precedence for applying redirect rules is:\n\n1. `_redirects` file (in the project's publish folder)\n1. `netlify.toml` file (in the project's publish folder)\n1. `netlify.toml` file (in the project's root folder)\n\nSee the [Redirects Documentation](https://www.netlify.com/docs/redirects/) for more information on Netlify's redirect and proxying capabilities.\n\n## Netlify Functions\n\nNetlify can also create serverless functions for you locally as part of Netlify Functions. The serverless functions can then be run by Netlify Dev in the same way that wold be when deployed to the cloud.\n\nA number of function templates are available to get you started, and you can add your own utility functions to suit your own project development needs.\n\n**Create a new function**\n\n```bash\n$ netlify functions:create\n```\n\n<details>\n<summary>\n<b>More detailed usage examples</b>\n</summary>\n\n```bash\n# Create a new function from one of the\n# available templates offered when prompted (see below)\n$ netlify functions:create\n\n# alternatives\n$ netlify functions:create hello-world # Create a new function with a given name\n$ netlify functions:create --name hello-world # same\n\n# Create a new function by cloning a template from a remote url\n# organised with dependencies installed into a subdirectory\n$ netlify functions:create hello-world --url https://github.com/netlify-labs/all-the-functions/tree/master/functions/9-using-middleware\n```\n\n**Deploying unbundled function folders**\n\nFunctions that have `node_modules` inside their own folders require these `node_modules` to be installed when deployed. For the time being, the Netlify build process does not recursively install dependencies for your function folders yet. So the recommended way to deploy these functions is to use the CLI command:\n\n```\nnetlify deploy --prod\n```\n\nOpt out of the continuous deployment flow and use [zip-it-and-ship-it](https://github.com/netlify/zip-it-and-ship-it) instead. [Follow this issue for more updates](https://github.com/netlify/netlify-dev-plugin/issues/140).\n\n**Writing your own Function Templates**\n\nFunction templates can specify `addons` that they rely on as well as execute arbitrary code after installation in an `onComplete` hook, if a special `.netlify-function-template.js` file exists in the directory:\n\n```js\n// .netlify-function-template.js\nmodule.exports = {\n  addons: [\n    {\n      addonName: \"fauna\",\n      addonDidInstall: () => {} // post install function to run after installing addon, eg. for setting up schema\n    }\n  ],\n  onComplete() {\n    console.log(`custom-template function created from template!`);\n  }\n};\n```\n\nInstead of using our basic templates, you can use your own by passing it with a --url flag: `netlify functions:create hello-world --url https://github.com/netlify-labs/all-the-functions/tree/master/functions/9-using-middleware`, specifying any addons and postinstall/complete steps as shown above.\n\n</details>\n\n### Function Builders, Function Builder Detection, and Relationship with `netlify-lambda`\n\n**Existing users of `netlify-lambda` should have no change to their workflow by switching to `netlify dev`.** One immediate benefit is no need for [proxying](https://github.com/netlify/netlify-lambda#proxying-for-local-development) since Netlify Dev does that for you.\n\n**Why Function Builders**\n\nNotice that all the functions created by `netlify functions:create` require no build step. This is intentional: we want to remain agnostic of build tooling and thereby create clear expectations: You give us a folder of functions, and we simply serve it (This is called [`zip-it-and-ship-it`](https://github.com/netlify/zip-it-and-ship-it)). If you want to build that folder from a separate source folder, that is entirely under your control. Use whatever tool you like.\n\nThis can be helpful, for example, to use ES modules syntax (e.g. `import`/`export`) via webpack, babel transforms via `babel-cli` or `babel-loader`, or strict type-checking and transpilation with TypeScript's `tsc` or other webpack loaders.\n\nWe'll call this category of tools **function builders**. In fact, we do maintain an open source function builder dedicated to the task of transforming serverless functions from source to destination via webpack, called [`netlify-lambda`](https://github.com/netlify/netlify-lambda). We maintain [a comparison between Netlify Dev and `netlify-lambda` on its README as well as advice on when to use which or both](https://github.com/netlify/netlify-lambda#netlify-lambda).\n\n**Function Builder Detection**\n\nWe don't expect everyone to use function builders, but we expect many will, and want to provide helpful defaults that \"just work\" for this. To do that, we use a similar detection concept to [project detectors](#Project-detection), and look for common function builder setups.\n\nWith this feature, pre-Netlify Dev projects like https://github.com/netlify/create-react-app-lambda can immediately use the `netlify dev` command with no change to code. Currently, we only offer detection for scripts with `netlify-lambda build $SRCFOLDER`. More ideas are welcome.\n\nNetlify Dev will watch `netlify-lambda`'s source folder and rebuild whenever the source file changes, eliminating the need for `netlify-lambda serve` since we dont want a duplicate functions server.\n\n**Bring Your Own Function Builder**\n\nWe may offer detection for more function builders in future, and also let you specify function build commands in the `netlify.toml` `[dev]` block. Please share your usecase with us if you are likely to need this.\n\n### Using Add-ons\n\nAdd-ons are a way for Netlify users to extend the functionality of their Jamstack site/app.\n\nCheck out [Add-on docs](https://www.netlify.com/docs/partner-add-ons/) here.\n\nTo try out an add-on with Netlify dev, run the `netlify addons:create` command:\n\n```bash\nnetlify addons:create fauna\n```\n\nThe above command will install the FaunaDB add-on and provision a noSQL database for your site to leverage. The FaunaDB add-on injects environment variables into your site's build process and the serverless functions.\n\nOr install this [one click example](https://github.com/netlify/fauna-one-click).\n\nAfter you have installed an add-on, it will be visible with the `netlify addons:list` command inside your site's current working directory. You can use `netlify addons:delete $ADDONNAME` to delete your addon instance.\n\nFor now, it is important to include instructions to create addons for each member of your team, as there is no way to specify addons inside of `netlify.toml`. We are working on this.\n\n## Contributing/Local Development\n\nThanks for contributing! You'll need to follow these steps to run Netlify CLI and `netlify-dev-plugin` locally:\n\n0. uninstall any globally installed versions of `netlify-cli`\n1. clone and install deps for https://github.com/netlify/cli\n1. `npm link` from inside the `cli` folder\n1. clone and install deps for this repo\n1. inside the `netlify-dev-plugin` folder, run `yarn link`\n1. inside the `cli` folder, run `yarn link \"netlify-dev-plugin\"`\n\nNow you're both ready to start testing `netlify dev` and to contribute to the project! Note these are untested instructions, please get in touch if you're unable to follow them clearly and we'll work with you. Or ping [@swyx](https://twitter.com/swyx).\n","readmeFilename":"README.md","_id":"netlify-dev-plugin@1.0.19","_shasum":"41e6af19a3ff7466de4ef7b401047217b3784041","_resolved":"https://registry.npmjs.org/netlify-dev-plugin/-/netlify-dev-plugin-1.0.19.tgz","_from":"https://registry.npmjs.org/netlify-dev-plugin/-/netlify-dev-plugin-1.0.19.tgz"}