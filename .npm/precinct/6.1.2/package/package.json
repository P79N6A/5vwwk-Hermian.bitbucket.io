{"name":"precinct","version":"6.1.2","description":"Unleash the detectives","main":"index.js","scripts":{"test":"jscs index.js test/index.js && mocha test/index.js"},"bin":{"precinct":"bin/cli.js"},"repository":{"type":"git","url":"git+ssh://git@github.com/mrjoelkemp/node-precinct.git"},"keywords":["modules","amd","commonjs","es6","sass","less","detective","dependencies"],"author":{"name":"Joel Kemp","email":"joel@mrjoelkemp.com"},"license":"MIT","bugs":{"url":"https://github.com/mrjoelkemp/node-precinct/issues"},"engines":{"node":">=6.0.0"},"homepage":"https://github.com/mrjoelkemp/node-precinct","dependencies":{"commander":"^2.19.0","debug":"^4.1.1","detective-amd":"^3.0.0","detective-cjs":"^3.1.1","detective-es6":"^2.0.0","detective-less":"^1.0.2","detective-postcss":"^3.0.0","detective-sass":"^3.0.0","detective-scss":"^2.0.0","detective-stylus":"^1.0.0","detective-typescript":"^5.1.1","module-definition":"^3.1.0","node-source-walk":"^4.2.0"},"devDependencies":{"jscs":"~3.0.7","jscs-preset-mrjoelkemp":"~2.0.0","mocha":"^5.2.0","rewire":"^4.0.1","sinon":"^6.2.0"},"readme":"### Precinct [![npm](http://img.shields.io/npm/v/precinct.svg)](https://npmjs.org/package/precinct) [![npm](http://img.shields.io/npm/dm/precinct.svg)](https://npmjs.org/package/precinct)\n\n> Unleash the detectives\n\n`npm install --save precinct`\n\nUses the appropriate detective to find the dependencies of a file or its AST.\n\nSupports:\n\n* JavaScript modules: AMD, CommonJS, and ES6.\n* Typescript\n* CSS Preprocessors: Sass, Stylus, and Less\n* CSS (PostCSS)\n\n### Usage\n\n```js\nvar precinct = require('precinct');\n\nvar content = fs.readFileSync('myFile.js', 'utf8');\n\n// Pass in a file's content or an AST\nvar deps = precinct(content);\n```\n\nYou may pass options (to individual detectives) based on the module type via an optional second object argument `detective(content, options), for example:\n\nExample call: `precinct(content, { amd: { skipLazyLoaded: true } });`\n\n - The supported module type prefixes are `amd`, `commonjs`, `es6`, `sass`, `stylus`, `less`\n\nCurrent options:\n\n* `amd.skipLazyLoaded`: tells the AMD detective to omit lazy-loaded dependencies (i.e., inner requires).\n* `es6.mixedImports`: allows for all dependencies to be fetched from a file that contains both CJS and ES6 imports.\n - Note: This will work for any file format that contains an es6 import.\n* `css.url`: tells the CSS detective to include `url()` references to images, fonts, etc.\n\n\nFinding non-JavaScript (ex: Sass and Stylus) dependencies:\n\n```js\nvar content = fs.readFileSync('styles.scss', 'utf8');\n\nvar deps = precinct(content, { type: 'sass' });\nvar deps2 = precinct(content, { type: 'stylus' });\n```\n\nOr, if you just want to pass in a filepath and get the dependencies:\n\n```js\nvar paperwork = require('precinct').paperwork;\n\nvar deps = paperwork('myFile.js');\nvar deps2 = paperwork('styles.scss');\n```\n\n###### `precinct.paperwork(filename, options)`\n\nSupported options:\n\n* `includeCore`: (default: true) set to `false` to exclude core Node dependencies from the list of dependencies.\n* `fileSystem`: (default: undefined) set to an alternative `fs` implementation that will be used to read the file path.\n* You may also pass detective-specific configuration like you would to `precinct(content, options)`.\n\n#### CLI\n\n*Assumes a global install of `npm install -g precinct`*\n\n`precinct [options] path/to/file`\n\n* Run `precinct --help` to see options\n\n### License\n\nMIT\n","readmeFilename":"Readme.md","_id":"precinct@6.1.2","_shasum":"279cc694ff109969fa0f82d77e62bcfa4a6c93be","_resolved":"https://registry.npmjs.org/precinct/-/precinct-6.1.2.tgz","_from":"https://registry.npmjs.org/precinct/-/precinct-6.1.2.tgz"}