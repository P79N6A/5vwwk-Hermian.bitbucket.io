{"name":"p-all","version":"2.1.0","description":"Run promise-returning & async functions concurrently with optional limited concurrency","license":"MIT","repository":{"type":"git","url":"git+https://github.com/sindresorhus/p-all.git"},"author":{"name":"Sindre Sorhus","email":"sindresorhus@gmail.com","url":"sindresorhus.com"},"engines":{"node":">=6"},"scripts":{"test":"xo && ava && tsd"},"files":["index.js","index.d.ts"],"keywords":["promise","all","function","func","fn","limited","limit","control","rate","collection","iterable","iterator","fulfilled","async","await","promises","concurrent","concurrently","concurrency","parallel","bluebird"],"dependencies":{"p-map":"^2.0.0"},"devDependencies":{"ava":"^1.4.1","delay":"^4.1.0","tsd":"^0.7.2","xo":"^0.24.0"},"readme":"# p-all [![Build Status](https://travis-ci.org/sindresorhus/p-all.svg?branch=master)](https://travis-ci.org/sindresorhus/p-all)\n\n> Run promise-returning & async functions concurrently with optional limited concurrency\n\nSimilar to `Promise.all()`, but accepts functions instead of promises directly so you can limit the concurrency.\n\nIf you're doing the same work in each function, use [`p-map`](https://github.com/sindresorhus/p-map) instead.\n\nSee [`p-series`](https://github.com/sindresorhus/p-series) for a serial counterpart.\n\n\n## Install\n\n```\n$ npm install p-all\n```\n\n\n## Usage\n\n```js\nconst pAll = require('p-all');\nconst got = require('got');\n\n(async () => {\n\tconst actions = [\n\t\t() => got('https://sindresorhus.com'),\n\t\t() => got('https://ava.li'),\n\t\t() => checkSomething(),\n\t\t() => doSomethingElse()\n\t];\n\n\tconsole.log(await pAll(actions, {concurrency: 2}));\n})();\n```\n\n\n## API\n\n### pAll(tasks, [options])\n\nReturns a `Promise` that is fulfilled when all promises returned from calling the functions in `tasks` are fulfilled, or rejects if any of the promises reject. The fulfilled value is an `Array` of the fulfilled values in `tasks` order.\n\n#### tasks\n\nType: `Iterable<Function>`\n\nIterable with promise-returning/async functions.\n\n#### options\n\nType: `Object`\n\n##### concurrency\n\nType: `number`<br>\nDefault: `Infinity`<br>\nMinimum: `1`\n\nNumber of concurrent pending promises.\n\n\n## Related\n\n- [p-map](https://github.com/sindresorhus/p-map) - Map over promises concurrently\n- [p-series](https://github.com/sindresorhus/p-series) - Run promise-returning & async functions in series\n- [p-props](https://github.com/sindresorhus/p-props) - Like `Promise.all()` but for `Map` and `Object`\n- [p-queue](https://github.com/sindresorhus/p-queue) - Promise queue with concurrency control\n- [p-limit](https://github.com/sindresorhus/p-limit) - Run multiple promise-returning & async functions with limited concurrency\n- [More…](https://github.com/sindresorhus/promise-fun)\n\n\n## License\n\nMIT © [Sindre Sorhus](https://sindresorhus.com)\n","readmeFilename":"readme.md","bugs":{"url":"https://github.com/sindresorhus/p-all/issues"},"homepage":"https://github.com/sindresorhus/p-all#readme","_id":"p-all@2.1.0","_shasum":"91419be56b7dee8fe4c5db875d55e0da084244a0","_resolved":"https://registry.npmjs.org/p-all/-/p-all-2.1.0.tgz","_from":"https://registry.npmjs.org/p-all/-/p-all-2.1.0.tgz"}