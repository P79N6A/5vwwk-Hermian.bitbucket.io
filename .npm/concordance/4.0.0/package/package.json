{"name":"concordance","version":"4.0.0","description":"Compare, format, diff and serialize any JavaScript value","main":"index.js","files":["lib","index.js"],"engines":{"node":">=6.12.3 <7 || >=8.9.4 <9 || >=10.0.0"},"scripts":{"lint":"as-i-preach","test":"npm run -s lint && nyc ava"},"repository":{"type":"git","url":"git+https://github.com/concordancejs/concordance.git"},"author":{"name":"Mark Wubben","url":"https://novemberborn.net/"},"license":"ISC","bugs":{"url":"https://github.com/concordancejs/concordance/issues"},"homepage":"https://github.com/concordancejs/concordance#readme","dependencies":{"date-time":"^2.1.0","esutils":"^2.0.2","fast-diff":"^1.1.2","js-string-escape":"^1.0.1","lodash.clonedeep":"^4.5.0","lodash.flattendeep":"^4.4.0","lodash.islength":"^4.0.1","lodash.merge":"^4.6.1","md5-hex":"^2.0.0","semver":"^5.5.1","well-known-symbols":"^2.0.0"},"devDependencies":{"@novemberborn/as-i-preach":"^10.0.1","ava":"1.0.0-beta.8","benchmark":"^2.1.3","chalk":"^2.4.1","codecov":"^3.1.0","lodash.isequal":"^4.5.0","nyc":"^13.0.1","pretty-format":"^23.6.0"},"as-i-preach":{"allowDevDependencies":["perf/**/*.js","test/**/*.js"]},"nyc":{"reporter":["html","lcov","text"]},"standard-engine":"@novemberborn/as-i-preach","readme":"# concordance\n\nCompare, format, diff and serialize any JavaScript value. Built for Node.js 6\nand above.\n\n## Behavior\n\nConcordance recursively describes JavaScript values, whether they're booleans or\ncomplex object structures. It recurses through all enumerable properties, list\nitems (e.g. arrays) and iterator entries.\n\nThe same algorithm is used when comparing, formatting or diffing values. This\nmeans Concordance's behavior is consistent, no matter how you use it.\n\n### Comparison details\n\n* [Object wrappers](https://github.com/getify/You-Dont-Know-JS/blob/master/types%20%26%20grammar/ch3.md#boxing-wrappers)\n  are compared both as objects and unwrapped values. Thus Concordance always\n  treats `Object(1)` as different from `1`.\n* `-0` is distinct from `0`.\n* `NaN` equals `NaN`.\n* The `Argument` values can be compared to a regular array.\n* `Error` names and messages are always compared, even if these are not\n  enumerable properties.\n* `Function` values are compared by identity only. Names are always formatted\n  and serialized.\n* `Global` objects are considered equal.\n* `Map` keys and `Set` items are compared in-order.\n* `Object` string properties are compared according to the [traversal order](http://2ality.com/2015/10/property-traversal-order-es6.html).\n  Symbol properties are compared by identity.\n* `Promise` values are compared by identity only.\n* `Symbol` values are compared by identity only.\n* Recursion stops whenever a circular reference is encountered. If the same\n  cycle is present in the actual and expected values they're considered equal,\n  but they're unequal otherwise.\n\n### Formatting details\n\nConcordance strives to format every aspect of a value that is used for\ncomparisons. Formatting is optimized for human legibility.\n\nStrings enjoy special formatting:\n\n* When used as keys, line break characters are escaped\n* Otherwise, multi-line strings are formatted using backticks, and line break\n  characters are replaced by [control pictures](http://graphemica.com/blocks/control-pictures).\n\nSimilarly, line breaks in symbol descriptions are escaped.\n\n### Diffing details\n\nConcordance tries to minimize diff lines. This is difficult with object values,\nwhich may have similar properties but a different constructor. Multi-line\nstrings are compared line-by-line.\n\n### Serialization details\n\nConcordance can serialize any value for later use. Deserialized values can be\ncompared to each other or to regular JavaScript values. The deserialized\nvalue should be passed as the **actual** value to the comparison and diffing\nmethods. Certain value comparisons behave differently when the **actual** value\nis deserialized:\n\n* `Argument` values can only be compared to other `Argument` values.\n* `Function` values are compared by name.\n* `Promise` values are compared by their constructor and additional enumerable\n  properties, but not by identity.\n* `Symbol` values are compared by their string serialization. [Registered](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Shared_symbols_in_the_global_symbol_registry)\n   and [well-known symbols](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Well-known_symbols)\n   will never equal symbols with similar descriptions.\n","readmeFilename":"README.md","_id":"concordance@4.0.0","_shasum":"5932fdee397d129bdbc3a1885fbe69839b1b7e15","_resolved":"https://registry.npmjs.org/concordance/-/concordance-4.0.0.tgz","_from":"https://registry.npmjs.org/concordance/-/concordance-4.0.0.tgz"}