{"name":"auto-changelog","version":"1.13.0","description":"Command line tool for generating a changelog from git tags and commit history","main":"./lib/index.js","bin":{"auto-changelog":"./lib/index.js"},"scripts":{"lint":"standard --verbose | snazzy","lint-markdown":"markdownlint README.md test/data/*.md","test":"cross-env NODE_ENV=test nyc mocha test","coverage":"nyc report --reporter=json && codecov -f coverage/coverage-final.json","clean":"rm -rf lib coverage","build":"babel src -d lib","preversion":"npm run lint && npm run test","version":"babel-node src/index.js --package && git add CHANGELOG.md","prepublish":"npm run clean && npm run build","postpublish":"npm run clean","generate-test-data":"cross-env NODE_ENV=test babel-node scripts/generate-test-data.js"},"author":{"name":"Pete Cook","email":"pete@cookpete.com","url":"http://github.com/cookpete"},"homepage":"https://github.com/CookPete/auto-changelog","repository":{"type":"git","url":"git+https://github.com/CookPete/auto-changelog.git"},"bugs":{"url":"https://github.com/CookPete/auto-changelog/issues"},"keywords":["auto","automatic","changelog","change","log","generator","git","commit","commits","history"],"license":"MIT","dependencies":{"@babel/polyfill":"^7.4.3","commander":"^2.20.0","handlebars":"^4.0.12","lodash.uniqby":"^4.7.0","node-fetch":"^2.3.0","parse-github-url":"^1.0.2","semver":"^6.0.0"},"devDependencies":{"@babel/cli":"^7.4.3","@babel/core":"^7.4.3","@babel/node":"^7.0.0","@babel/preset-env":"^7.4.3","@babel/register":"^7.4.0","babel-eslint":"^10.0.1","babel-plugin-istanbul":"^5.1.0","babel-plugin-rewire":"^1.2.0","chai":"^4.2.0","codecov":"^3.3.0","cross-env":"^5.2.0","markdownlint-cli":"^0.15.0","mocha":"^6.1.2","nyc":"^13.1.0","snazzy":"^8.0.0","standard":"^12.0.1"},"babel":{"presets":["@babel/preset-env"],"env":{"test":{"plugins":["istanbul","rewire"]}}},"standard":{"parser":"babel-eslint","ignore":["test/data/"]},"nyc":{"all":true,"include":"src","exclude":"src/index.js","sourceMap":false,"instrument":false,"report-dir":"./coverage","temp-dir":"./coverage/.nyc_output","require":["@babel/polyfill","@babel/register"],"reporter":["text","html"]},"readme":"# auto-changelog\n\nCommand line tool for generating a changelog from git tags and commit history\n\n[![Latest npm version](https://img.shields.io/npm/v/auto-changelog.svg)](https://www.npmjs.com/package/auto-changelog)\n[![Build Status](https://img.shields.io/travis/CookPete/auto-changelog/master.svg)](https://travis-ci.org/CookPete/auto-changelog)\n[![Test Coverage](https://img.shields.io/codecov/c/github/cookpete/auto-changelog.svg)](https://codecov.io/gh/CookPete/auto-changelog)\n\n### Installation\n\n```bash\nnpm install -g auto-changelog\n```\n\n### Usage\n\nSimply run `auto-changelog` in the root folder of a git repository. `git log` is run behind the scenes in order to parse the commit history.\n\n```bash\nUsage: auto-changelog [options]\n\nOptions:\n\n  -o, --output [file]                 # output file, default: CHANGELOG.md\n  -t, --template [template]           # specify template to use [compact, keepachangelog, json], default: compact\n  -r, --remote [remote]               # specify git remote to use for links, default: origin\n  -p, --package                       # use version from package.json as latest release\n  -v, --latest-version [version]      # use specified version as latest release\n  -u, --unreleased                    # include section for unreleased changes\n  -l, --commit-limit [count]          # number of commits to display per release, default: 3\n  -b, --backfill-limit [count]        # number of commits to backfill empty releases with, default: 3\n  -i, --issue-url [url]               # override url for issues, use {id} for issue id\n      --issue-pattern [regex]         # override regex pattern for issues in commit messages\n      --breaking-pattern [regex]      # regex pattern for breaking change commits\n      --merge-pattern [regex]         # add custom regex pattern for merge commits\n      --ignore-commit-pattern [regex] # pattern to ignore when parsing commits\n      --tag-pattern [regex]           # override regex pattern for release tags\n      --tag-prefix [prefix]           # prefix used in version tags, default: v\n      --starting-commit [hash]        # starting commit to use for changelog generation\n      --sort-commits [property]       # sort commits by property [relevance, date], default: relevance\n      --include-branch [branch]       # one or more branches to include commits from, comma separated\n      --release-summary               # display tagged commit message body as release summary\n      --handlebars-setup              # handlebars setup file\n      --stdout                        # output changelog to stdout\n  -V, --version                       # output the version number\n  -h, --help                          # output usage information\n\n\n# Write log to CHANGELOG.md in current directory\nauto-changelog\n\n# Write log to HISTORY.md\nauto-changelog --output HISTORY.md\n\n# Write log using keepachangelog template\nauto-changelog --template keepachangelog\n\n# Write log using custom handlebars template in current directory\nauto-changelog --template my-custom-template.hbs\n\n# Change rendered commit limit to 5\nauto-changelog --commit-limit 5\n\n# Disable the commit limit, rendering all commits\nauto-changelog --commit-limit false\n```\n\nBy default, changelogs will link to the appropriate pages for commits, issues and merge requests based on the `origin` remote of your repo. GitHub, GitLab, BitBucket and Azure DevOps are all supported. If you [close issues using keywords](https://help.github.com/articles/closing-issues-using-keywords) but refer to issues outside of your repository, you can use `--issue-url` to link somewhere else:\n\n```bash\n# Link all issues to redmine\nauto-changelog --issue-url https://www.redmine.org/issues/{id}\n```\n\nUse `--tag-prefix [prefix]` if you prefix your version tags with a certain string:\n\n```bash\n# When all versions are tagged like my-package/1.2.3\nauto-changelog --tag-prefix my-package/\n```\n\nBy default, `auto-changelog` looks for valid semver tags to build a list of releases. If you are using another format (or want to include all tags), use `--tag-pattern [regex]`:\n\n```bash\n# When all versions are tagged like build-12345\nauto-changelog --tag-pattern build-\\d+\n\n# Include any tag as a release\nauto-changelog --tag-pattern .+\n```\n\nYou can also set any option in `package.json` under the `auto-changelog` key, using camelCase options. Note that `includeBranch` should be an array here, not a comma separated list:\n\n```js\n{\n  \"name\": \"my-awesome-package\",\n  \"version\": \"1.0.0\",\n  \"scripts\": {\n    // ...\n  },\n  \"auto-changelog\": {\n    \"output\": \"HISTORY.md\",\n    \"template\": \"keepachangelog\",\n    \"unreleased\": true,\n    \"commitLimit\": false,\n    \"includeBranch\": [\n      \"release-v2\",\n      \"release-v3\"\n    ]\n  }\n}\n```\n\nYou can also store config options in an `.auto-changelog` file in your project root:\n\n```js\n{\n  \"output\": \"HISTORY.md\",\n  \"template\": \"keepachangelog\",\n  \"unreleased\": true,\n  \"commitLimit\": false\n}\n```\n\nNote that any options set in `package.json` will take precedence over any set in `.auto-changelog`.\n\n### Requirements\n\n`auto-changelog` is designed to be as flexible as possible, providing a clear changelog for any project. There are only two absolute requirements:\n\n- You should be using git `1.7.2` or later\n- All versions should be tagged using [semver](https://semver.org) tag names – this happens by default when using [`npm version`](https://docs.npmjs.com/cli/version)\n\nThere are some less strict requirements to improve your changelog:\n\n- [Close issues using keywords](https://help.github.com/articles/closing-issues-using-keywords)\n- Merge pull requests using the standard merge commit message for your platform\n\n### What you might do if you’re clever\n\nInstall `auto-changelog` to dev dependencies:\n\n```bash\nnpm install auto-changelog --save-dev\n# or\nyarn add auto-changelog --dev\n```\n\nAdd `auto-changelog -p && git add CHANGELOG.md` to the `version` scripts in your `package.json`:\n\n```json\n{\n  \"name\": \"my-awesome-package\",\n  \"version\": \"1.0.0\",\n  \"devDependencies\": {\n    \"auto-changelog\": \"*\"\n  },\n  \"scripts\": {\n    \"version\": \"auto-changelog -p && git add CHANGELOG.md\"\n  }\n}\n```\n\nUsing `-p` or `--package` uses the `version` from `package.json` as the latest release, so that all commits between the previous release and now become part of that release. Essentially anything that would normally be parsed as `Unreleased` will now come under the `version` from `package.json`\n\nNow every time you run [`npm version`](https://docs.npmjs.com/cli/version), the changelog will automatically update and be part of the version commit.\n\n### Breaking changes\n\nIf you use a common pattern in your commit messages for breaking changes, use `--breaking-pattern` to highlight those commits as breaking changes in your changelog. Breaking change commits will always be listed as part of a release, regardless of any `--commit-limit` set.\n\n```bash\nauto-changelog --breaking-pattern \"BREAKING CHANGE:\"\n```\n\n### Custom templates\n\nIf you aren’t happy with the default templates or want to tweak something, you can point to a [handlebars](http://handlebarsjs.com) template in your local repo. Check out the [existing templates](templates) to see what is possible.\n\nSave `changelog-template.hbs` somewhere in your repo:\n\n```hbs\n### Changelog\nMy custom changelog template. Don’t worry about indentation here; it is automatically removed from the output.\n\n{{#each releases}}\n  Every release has a {{title}} and a {{href}} you can use to link to the commit diff.\n  It also has an {{isoDate}} and a {{niceDate}} you might want to use.\n  {{#each merges}}\n    - A merge has a {{message}}, an {{id}} and a {{href}} to the PR.\n  {{/each}}\n  {{#each fixes}}\n    - Each fix has a {{commit}} with a {{commit.subject}}, an {{id}} and a {{href}} to the fixed issue.\n  {{/each}}\n  {{#each commits}}\n    - Commits have a {{shorthash}}, a {{subject}} and a {{href}}, amongst other things.\n  {{/each}}\n{{/each}}\n```\n\nThen just use `--template` to point to your template:\n\n```bash\nauto-changelog --template changelog-template.hbs\n```\n\nYou can also point to an external template by passing in a URL:\n\n```bash\nauto-changelog --template https://example.com/templates/compact.hbs\n```\n\nTo see exactly what data is passed in to the templates, you can generate a JSON version of the changelog:\n\n```bash\nauto-changelog --template json --output changelog-data.json\n```\n\n### `commit-list` helper\n\nUse `{{#commit-list}}` to render a list of commits depending on certain patterns in the commit messages:\n\n```hbs\n{{#each releases}}\n  ### [{{title}}]({{href}})\n\n  {{! List commits with `Breaking change: ` somewhere in the message }}\n  {{#commit-list commits heading='### Breaking Changes' message='Breaking change: '}}\n    - {{subject}} [`{{shorthash}}`]({{href}})\n  {{/commit-list}}\n\n  {{! List commits that add new features, but not those already listed above }}\n  {{#commit-list commits heading='### New Features' message='feat: ' exclude='Breaking change: '}}\n    - {{subject}} [`{{shorthash}}`]({{href}})\n  {{/commit-list}}\n{{/each}}\n```\n\n| Option    | Description |\n| --------- | ----------- |\n| `heading` | A heading for the list, only renders if at least one commit matches |\n| `message` | A regex pattern to match against the entire commit message |\n| `subject` | A regex pattern to match against the commit subject only |\n| `exclude` | A regex pattern to exclude from the list – useful for avoiding listing commits more than once |\n\n### Custom issue patterns\n\nBy default, `auto-changelog` will parse [GitHub-style issue fixes](https://help.github.com/articles/closing-issues-using-keywords/) in your commit messages. If you use Jira or an alternative pattern in your commits to reference issues, you can pass in a custom regular expression to `--issue-pattern` along with `--issue-url`:\n\n```bash\n# Parse Jira-style issues in your commit messages, like PROJECT-418\nauto-changelog --issue-pattern [A-Z]+-\\d+ --issue-url https://issues.apache.org/jira/browse/{id}\n```\n\nOr, in your `package.json`:\n\n```js\n{\n  \"name\": \"my-awesome-package\",\n  \"auto-changelog\": {\n    \"issueUrl\": \"https://issues.apache.org/jira/browse/{id}\",\n    \"issuePattern\": \"[A-Z]+-\\d+\"\n  }\n}\n```\n\nIf you use a certain pattern before or after the issue number, like `fixes {id}`, just use a capturing group:\n\n```bash\n# \"This commit fixes ISSUE-123\" will now parse ISSUE-123 as an issue fix\nauto-changelog --issue-pattern \"[Ff]ixes ([A-Z]+-\\d+)\"\n```\n\n### Replacing text\n\nTo insert links or other markup to PR titles and commit messages that appear in the log, use the `replaceText` option in your `package.json`:\n\n```js\n{\n  \"name\": \"my-awesome-package\",\n  \"auto-changelog\": {\n    \"replaceText\": {\n      \"(ABC-\\\\d+)\": \"[`$1`](https://issues.apache.org/jira/browse/$1)\"\n    }\n  }\n}\n```\n\nHere, any time a pattern like `ABC-123` appears in your log, it will be replaced with a link to the relevant issue in Jira. Each pattern is applied using `string.replace(new RegExp(key, 'g'), value)`.\n\n### Handlebars setup file\n\nThe `--handlebars-setup` options allows you to point to a file to add custom Handlebars helpers, for use in custom templates using `--template`. Paths are relative to the directory in which you run `auto-changelog`.\n\n```js\nauto-changelog --handlebars-setup setup.js --template custom-template.hbs\n\n// setup.js\nmodule.exports = function (Handlebars) {\n  Handlebars.registerHelper('custom', function (context, options) {\n    return 'custom helpers!'\n  })\n}\n\n// custom-template.hbs\nNow you can use {{custom}}\n```\n\n### Migrating to `1.x`\n\nIf you are upgrading from `0.x`, the same options are still supported out of the box. Nothing will break, but your changelog may look slightly different:\n\n- The default template is now `compact`\n  - If you still want to use the [`keepachangelog`](http://keepachangelog.com) format, use `--template keepachangelog`\n- Templates now use `-` instead of `*` for lists\n- Up to 3 commits are now shown per release by default, use `--commit-limit` to change this\n- Unreleased changes are no longer listed by default, use `--unreleased` to include them\n- [GitLab](https://gitlab.com) and [BitBucket](https://bitbucket.org) are now fully supported\n\nIf anything isn’t working correctly, [open an issue](https://github.com/CookPete/auto-changelog/issues).\n\n### FAQ\n\n#### What’s a changelog?\n\nSee [keepachangelog.com](http://keepachangelog.com).\n\n#### What does this do?\n\nThe command parses your git commit history and generates a changelog based on tagged versions, merged pull requests and closed issues. See a simple example in [this very repo](CHANGELOG.md).\n\n#### Why do I need it?\n\nBecause keeping a changelog can be tedious and difficult to get right. If you don’t have the patience for a hand-crafted, bespoke changelog then this makes keeping one rather easy. It also can be [automated if you’re feeling extra lazy](#what-you-might-do-if-youre-clever).\n","readmeFilename":"README.md","_id":"auto-changelog@1.13.0","_shasum":"d082444d1ae9411e4ab83b6e82ed0fcb95f7d471","_resolved":"https://registry.npmjs.org/auto-changelog/-/auto-changelog-1.13.0.tgz","_from":"https://registry.npmjs.org/auto-changelog/-/auto-changelog-1.13.0.tgz"}