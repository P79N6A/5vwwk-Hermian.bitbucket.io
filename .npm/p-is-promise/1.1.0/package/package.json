{"name":"p-is-promise","version":"1.1.0","description":"Check if something is a promise","license":"MIT","repository":{"type":"git","url":"git+https://github.com/sindresorhus/p-is-promise.git"},"author":{"name":"Sindre Sorhus","email":"sindresorhus@gmail.com","url":"sindresorhus.com"},"engines":{"node":">=4"},"scripts":{"test":"xo && ava"},"files":["index.js"],"keywords":["promise","is","detect","check","kind","type","thenable","es2015","async","await","promises","bluebird"],"devDependencies":{"ava":"*","bluebird":"^3.4.6","xo":"*"},"xo":{"esnext":true},"readme":"# p-is-promise [![Build Status](https://travis-ci.org/sindresorhus/p-is-promise.svg?branch=master)](https://travis-ci.org/sindresorhus/p-is-promise)\n\n> Check if something is a promise\n\nWhy not [`is-promise`](https://github.com/then/is-promise)? That module [checks for a thenable](https://github.com/then/is-promise/issues/6), not an ES2015 promise. This one is stricter.\n\nYou most likely don't need this. Just pass your value to `Promise.resolve()` and let it handle it.\n\nCan be useful if you need to create a fast path for a synchronous operation.\n\n\n## Install\n\n```\n$ npm install --save p-is-promise\n```\n\n\n## Usage\n\n```js\nconst pIsPromise = require('p-is-promise');\nconst Bluebird = require('bluebird');\n\npIsPromise(Promise.resolve('ðŸ¦„'));\n//=> true\n\npIsPromise(Bluebird.resolve('ðŸ¦„'));\n//=> true\n\npIsPromise('ðŸ¦„');\n//=> false\n```\n\n\n## Related\n\n- [Moreâ€¦](https://github.com/sindresorhus/promise-fun)\n\n\n## License\n\nMIT Â© [Sindre Sorhus](https://sindresorhus.com)\n","readmeFilename":"readme.md","bugs":{"url":"https://github.com/sindresorhus/p-is-promise/issues"},"homepage":"https://github.com/sindresorhus/p-is-promise#readme","_id":"p-is-promise@1.1.0","_shasum":"9c9456989e9f6588017b0434d56097675c3da05e","_resolved":"https://registry.npmjs.org/p-is-promise/-/p-is-promise-1.1.0.tgz","_from":"https://registry.npmjs.org/p-is-promise/-/p-is-promise-1.1.0.tgz"}