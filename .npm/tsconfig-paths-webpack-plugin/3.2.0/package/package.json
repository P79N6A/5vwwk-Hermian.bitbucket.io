{"name":"tsconfig-paths-webpack-plugin","version":"3.2.0","description":"Load modules according to tsconfig paths in webpack.","main":"lib/index.js","types":"lib/index","author":{"name":"Jonas Kello"},"license":"MIT","repository":{"type":"git","url":"git+https://github.com/dividab/tsconfig-paths-webpack-plugin.git"},"dependencies":{"chalk":"^2.3.0","enhanced-resolve":"^4.0.0","tsconfig-paths":"^3.4.0"},"devDependencies":{"@types/colors":"^1.1.3","@types/lodash":"^4.14.68","@types/node":"^8.0.9","husky":"^0.14.3","lint-staged":"^6.0.0","rimraf":"^2.6.2","shelljs":"^0.7.8","ts-loader":"^2.2.2","ts-node":"^6.0.3","tslint":"^5.8.0","tslint-immutable":"^4.4.0","typescript":"^2.4.1","webpack":"^4.1.1","webpack-cli":"^2.0.11"},"scripts":{"precommit":"lint-staged","compile":"tsc -p src","compile:tests":"tsc -p tests","compile:example":"tsc -p example","example":"yarn build && cd example && webpack","build":"rimraf lib && tsc -p src","lint":"tslint -t msbuild './src/**/*.ts{,x}' -e './src/node_modules/**/*'","publish:major":"yarn run build && node scripts/publish.js major","publish:minor":"yarn run build && node scripts/publish.js minor","publish:patch":"yarn run build && node scripts/publish.js patch"},"lint-staged":{"*.{ts,tsx}":"tslint","*.{ts,tsx,json,css}":["prettier --write","git add"]},"readme":"# tsconfig-paths-webpack-plugin\r\n\r\n[![npm version][version-image]][version-url]\r\n[![code style: prettier][prettier-image]][prettier-url]\r\n[![MIT license][license-image]][license-url]\r\n\r\nUse this to load modules whose location is specified in the `paths` section of\r\n`tsconfig.json` when using webpack. This package provides the functionality of\r\nthe [tsconfig-paths](https://www.npmjs.com/package/tsconfig-paths) package but\r\nas a webpack plug-in.\r\n\r\n## How to install\r\n\r\n> NOTE: If you are using webpack 4 you need to use version >= 3.0.0 (which is aso backwards compatible with webpack 3).\r\n\r\n```\r\nyarn add --dev tsconfig-paths-webpack-plugin\r\n```\r\n\r\nor\r\n\r\n```\r\nnpm install --save-dev tsconfig-paths-webpack-plugin\r\n```\r\n\r\n## How to use\r\n\r\nIn your webpack config add this:\r\n\r\n```js\r\nconst TsconfigPathsPlugin = require('tsconfig-paths-webpack-plugin');\r\n\r\nmodule.exports = {\r\n  ...\r\n  resolve: {\r\n    plugins: [new TsconfigPathsPlugin({ /*configFile: \"./path/to/tsconfig.json\" */ })]\r\n  }\r\n  ...\r\n}\r\n```\r\n\r\n> Notice that the plugin is placed in the `resolve.plugins` section of the configuration. `tsconfig-paths-webpack-plugin` is a resolve plugin and should only be placed in this part of the configuration. Don't confuse this with the plugins array at the root of the webpack configuration object.\r\n\r\n## Typescript support\r\n\r\nThis package has typescript typings included. If your webpack config is using typescript, you can use this syntax to import the default export:\r\n\r\n```ts\r\nimport TsconfigPathsPlugin from \"tsconfig-paths-webpack-plugin\";\r\n```\r\n\r\nOr you can use this syntax to import the named export:\r\n\r\n```ts\r\nimport { TsconfigPathsPlugin } from \"tsconfig-paths-webpack-plugin\";\r\n```\r\n\r\n## Options\r\n\r\n#### configFile _(string) (default='tsconfig.json')_\r\n\r\nAllows you to specify where to find the TypeScript configuration file.\r\n\r\nYou may provide\r\n\r\n* just a file name. The plugin will search for the filename using the built-in\r\n  logic in the `tsconfig-paths` package. The search will start at `cwd`.\r\n* a relative path to the configuration file. It will be resolved relative to\r\n  `cwd`.\r\n* an absolute path to the configuration file.\r\n\r\n> The use of `cwd` as default above is not optimal but we've found no better\r\n> solution yet. If you have a suggestion please file an issue.\r\n\r\n#### extensions _(string[]) (default=[\".ts\", \".tsx\"])_\r\n\r\nAn array of the extensions that will be tried during resolve. Ideally this would be the same as the extensions from the webpack config but it seems resolver plug-ins does not have access to this infomration so you need to specify it again for the plugin.\r\n\r\n#### baseUrl _(string) (default=undefined)_\r\n\r\nThis allows you to override the `baseUrl` found in tsconfig.json. The baseUrl specifies from which directory `paths` should be resolved. So this option enabled you to resolve from anhother directory than the one where tsconfig.json is located. This can be useful if you want to use webpack with `tsc --watch` instead of a typescript loader. If this option is `undefined` then the `baseUrl` from tsconfig.json will be used.\r\n\r\n#### mainFields _(string[]) (default=[\"main\"])_\r\n\r\nAn array of the field names that should be considered when resolving packages. Ideally this would be the same as the mainFields from the webpack config but it seems resolver plug-ins does not have access to this infomration so you need to specify it again for the plugin.\r\n\r\n#### silent _(boolean) (default=false)_\r\n\r\nIf true, no console.log messages will be emitted. Note that most error messages\r\nare emitted via webpack which is not affected by this flag.\r\n\r\n#### logLevel _(string) (default=warn)_\r\n\r\nCan be `info`, `warn` or `error` which limits the log output to the specified\r\nlog level. Beware of the fact that errors are written to stderr and everything\r\nelse is written to stderr (or stdout if logInfoToStdOut is true).\r\n\r\n#### colors _(boolean) (default=true)_\r\n\r\nIf `false`, disables built-in colors in logger messages.\r\n\r\n#### logInfoToStdOut _(boolean) (default=false)_\r\n\r\nThis is important if you read from stdout or stderr and for proper error\r\nhandling. The default value ensures that you can read from stdout e.g. via pipes\r\nor you use webpack -j to generate json output.\r\n\r\n## How to test\r\n\r\nTo run the provided example:\r\n\r\n```\r\nyarn example\r\n```\r\n\r\n## Prior work\r\n\r\nThis project uses work done in the\r\n[awesome-typescript-loader](https://github.com/s-panferov/awesome-typescript-loader).\r\n\r\n[version-image]: https://img.shields.io/npm/v/tsconfig-paths-webpack-plugin.svg?style=flat\r\n[version-url]: https://www.npmjs.com/package/tsconfig-paths-webpack-plugin\r\n[prettier-image]: https://img.shields.io/badge/code_style-prettier-ff69b4.svg?style=flat\r\n[prettier-url]: https://github.com/prettier/prettier\r\n[license-image]: https://img.shields.io/github/license/jonaskello/tsconfig-paths-webpack-plugin.svg?style=flat\r\n[license-url]: https://opensource.org/licenses/MIT\r\n\r\n```\r\n\r\n```\r\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/dividab/tsconfig-paths-webpack-plugin/issues"},"homepage":"https://github.com/dividab/tsconfig-paths-webpack-plugin#readme","_id":"tsconfig-paths-webpack-plugin@3.2.0","_shasum":"6e70bd42915ad0efb64d3385163f0c1270f3e04d","_resolved":"https://registry.npmjs.org/tsconfig-paths-webpack-plugin/-/tsconfig-paths-webpack-plugin-3.2.0.tgz","_from":"https://registry.npmjs.org/tsconfig-paths-webpack-plugin/-/tsconfig-paths-webpack-plugin-3.2.0.tgz"}