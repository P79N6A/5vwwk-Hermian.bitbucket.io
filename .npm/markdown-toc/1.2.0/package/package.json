{"name":"markdown-toc","description":"Generate a markdown TOC (table of contents) with Remarkable.","version":"1.2.0","homepage":"https://github.com/jonschlinkert/markdown-toc","author":{"name":"Jon Schlinkert","url":"https://github.com/jonschlinkert"},"contributors":[{"name":"=^._.^=","url":"http://maxogden.com"},{"name":"AndrÃ©s","url":"http://angrykoala.github.io"},{"name":"Benjamin Schmitz","url":"https://github.com/Vortex375"},{"name":"Christian Raunitschka","url":"raunitschka.de"},{"name":"Daniel Chen","url":"http://chendaniely.github.io"},{"name":"Daniel Mietchen","url":"http://about.me/daniel.mietchen"},{"name":"David Mohl","url":"https://dvcrn.github.io"},{"name":"Federico Soave","url":"https://github.com/Feder1co5oave"},{"name":"Gary Green","url":"https://github.com/garygreen"},{"name":"Jon Schlinkert","url":"http://twitter.com/jonschlinkert"},{"name":"Josh Duff","url":"https://tehshrike.github.io"},{"name":"Matt Ellis","url":"http://sticklebackplastic.com"},{"name":"Nicolas Morel","url":"https://github.com/Marsup"},{"name":"Rafael Steil","url":"http://rafaelsteil.com"},{"name":"Richard Bradley","url":"https://github.com/RichardBradley"},{"name":"Seth Vincent","url":"https://sethvincent.com"},{"name":"Stefan Walther","url":"http://qliksite.io"},{"name":"Tao Wang","url":"https://github.com/twang2218"},{"url":"https://github.com/lu22do"},{"name":"Zeke Sikelianos","url":"http://zeke.sikelianos.com"}],"repository":{"type":"git","url":"git+https://github.com/jonschlinkert/markdown-toc.git"},"bugs":{"url":"https://github.com/jonschlinkert/markdown-toc/issues"},"license":"MIT","files":["cli.js","index.js","lib"],"main":"index.js","bin":{"markdown-toc":"cli.js"},"engines":{"node":">=0.10.0"},"scripts":{"test":"mocha"},"dependencies":{"concat-stream":"^1.5.2","diacritics-map":"^0.1.0","gray-matter":"^2.1.0","lazy-cache":"^2.0.2","list-item":"^1.1.1","markdown-link":"^0.1.1","minimist":"^1.2.0","mixin-deep":"^1.1.3","object.pick":"^1.2.0","remarkable":"^1.7.1","repeat-string":"^1.6.1","strip-color":"^0.1.0"},"devDependencies":{"gulp-format-md":"^0.1.11","mocha":"^3.2.0"},"keywords":["anchor","commonmark","docs","document","documentation","glossary","heading","index","links","markdown","md","plugin","readme","reference","remarkable","remarkableplugin","render","renderer","table","table of contents","table-of-contents","toc","write"],"verb":{"run":true,"toc":true,"layout":"default","tasks":["readme"],"plugins":["gulp-format-md"],"related":{"list":["gfm-code-blocks","markdown-link","markdown-utils","pretty-remarkable","remarkable"]},"reflinks":["gfm-code-blocks","markdown-link","markdown-utils","pretty-remarkable","remarkable","verb","verb-readme-generator"],"lint":{"reflinks":true}},"directories":{"test":"test"},"readme":"# markdown-toc [![NPM version](https://img.shields.io/npm/v/markdown-toc.svg?style=flat)](https://www.npmjs.com/package/markdown-toc) [![NPM monthly downloads](https://img.shields.io/npm/dm/markdown-toc.svg?style=flat)](https://npmjs.org/package/markdown-toc)  [![NPM total downloads](https://img.shields.io/npm/dt/markdown-toc.svg?style=flat)](https://npmjs.org/package/markdown-toc) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/markdown-toc.svg?style=flat&label=Travis)](https://travis-ci.org/jonschlinkert/markdown-toc) [![Windows Build Status](https://img.shields.io/appveyor/ci/jonschlinkert/markdown-toc.svg?style=flat&label=AppVeyor)](https://ci.appveyor.com/project/jonschlinkert/markdown-toc)\n\n> Generate a markdown TOC (table of contents) with Remarkable.\n\n## Table of Contents\n\n- [Install](#install)\n- [CLI](#cli)\n- [Highlights](#highlights)\n- [Usage](#usage)\n- [API](#api)\n  * [toc.plugin](#tocplugin)\n  * [toc.json](#tocjson)\n  * [toc.insert](#tocinsert)\n  * [Utility functions](#utility-functions)\n- [Options](#options)\n  * [options.append](#optionsappend)\n  * [options.filter](#optionsfilter)\n  * [options.slugify](#optionsslugify)\n  * [options.bullets](#optionsbullets)\n  * [options.maxdepth](#optionsmaxdepth)\n  * [options.firsth1](#optionsfirsth1)\n  * [options.stripHeadingTags](#optionsstripheadingtags)\n- [About](#about)\n\n_(TOC generated by [verb](https://github.com/verbose/verb) using [markdown-toc](https://github.com/jonschlinkert/markdown-toc))_\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save markdown-toc\n```\n\n## CLI\n\n```\nUsage: markdown-toc [options] <input>\n\n  input:        The Markdown file to parse for table of contents,\n                or \"-\" to read from stdin.\n\n  -i:           Edit the <input> file directly, injecting the TOC at &lt;!-- toc --&gt;\n                (Without this flag, the default is to print the TOC to stdout.)\n\n  --json:       Print the TOC in JSON format\n\n  --append:     Append a string to the end of the TOC\n\n  --bullets:    Bullets to use for items in the generated TOC\n                (Supports multiple bullets: --bullets \"*\" --bullets \"-\" --bullets \"+\")\n                (Default is \"*\".)\n\n  --maxdepth:   Use headings whose depth is at most maxdepth\n                (Default is 6.)\n\n  --no-firsth1: Include the first h1-level heading in a file\n\n  --no-stripHeadingTags: Do not strip extraneous HTML tags from heading\n                         text before slugifying\n```\n\n## Highlights\n\n**Features**\n\n* Can optionally be used as a [remarkable](https://github.com/jonschlinkert/remarkable) plugin\n* Returns an object with the rendered TOC (on `content`), as well as a `json` property with the raw TOC object, so you can generate your own TOC using templates or however you want\n* Works with [repeated headings](https://gist.github.com/jonschlinkert/ac5d8122bfaaa394f896)\n* Uses sane defaults, so no customization is necessary, but you can if you need to.\n* [filter](#filter-headings) out headings you don't want\n* [Improve](#titleize) the headings you do want\n* Use a custom [slugify](#optionsslugify) function to change how links are created\n\n**Safe!**\n\n* Won't mangle markdown in code examples in gfm code blocks that other TOC generators mistake as being actual headings (this happens when markdown headings are show in _examples_, meaning they arent' actually headings that should be in the toc. Also happens with yaml and coffee-script comments, or any comments that use `#`)\n* Won't mangle front-matter, or mistake front-matter properties for headings like other TOC generators\n\n## Usage\n\n```js\nvar toc = require('markdown-toc');\n\ntoc('# One\\n\\n# Two').content;\n// Results in:\n// - [One](#one)\n// - [Two](#two)\n```\n\nTo allow customization of the output, an object is returned with the following properties:\n\n* `content` **{String}**: The generated table of contents. Unless you want to customize rendering, this is all you need.\n* `highest` **{Number}**: The highest level heading found. This is used to adjust indentation.\n* `tokens` **{Array}**: Headings tokens that can be used for custom rendering\n\n## API\n\n### toc.plugin\n\nUse as a [remarkable](https://github.com/jonschlinkert/remarkable) plugin.\n\n```js\nvar Remarkable = require('remarkable');\nvar toc = require('markdown-toc');\n\nfunction render(str, options) {\n  return new Remarkable()\n    .use(toc.plugin(options)) // <= register the plugin\n    .render(str);\n}\n```\n\n**Usage example**\n\n```js\nvar results = render('# AAA\\n# BBB\\n# CCC\\nfoo\\nbar\\nbaz');\n```\n\nResults in:\n\n```\n- [AAA](#aaa)\n- [BBB](#bbb)\n- [CCC](#ccc)\n```\n\n### toc.json\n\nObject for creating a custom TOC.\n\n```js\ntoc('# AAA\\n## BBB\\n### CCC\\nfoo').json;\n\n// results in\n[ { content: 'AAA', slug: 'aaa', lvl: 1 },\n  { content: 'BBB', slug: 'bbb', lvl: 2 },\n  { content: 'CCC', slug: 'ccc', lvl: 3 } ]\n```\n\n### toc.insert\n\nInsert a table of contents immediately after an _opening_ `<!-- toc -->` code comment, or replace an existing TOC if both an _opening_ comment and a _closing_ comment (`<!-- tocstop -->`) are found.\n\n_(This strategy works well since code comments in markdown are hidden when viewed as HTML, like when viewing a README on GitHub README for example)._\n\n**Example**\n\n```\n<!-- toc -->\n- old toc 1\n- old toc 2\n- old toc 3\n<!-- tocstop -->\n\n## abc\nThis is a b c.\n\n## xyz\nThis is x y z.\n```\n\nWould result in something like:\n\n```\n<!-- toc -->\n- [abc](#abc)\n- [xyz](#xyz)\n<!-- tocstop -->\n\n## abc\nThis is a b c.\n\n## xyz\nThis is x y z.\n```\n\n### Utility functions\n\nAs a convenience to folks who wants to create a custom TOC, markdown-toc's internal utility methods are exposed:\n\n```js\nvar toc = require('markdown-toc');\n```\n\n* `toc.bullets()`: render a bullet list from an array of tokens\n* `toc.linkify()`: linking a heading `content` string\n* `toc.slugify()`: slugify a heading `content` string\n* `toc.strip()`: strip words or characters from a heading `content` string\n\n**Example**\n\n```js\nvar result = toc('# AAA\\n## BBB\\n### CCC\\nfoo');\nvar str = '';\n\nresult.json.forEach(function(heading) {\n  str += toc.linkify(heading.content);\n});\n```\n\n## Options\n\n### options.append\n\nAppend a string to the end of the TOC.\n\n```js\ntoc(str, {append: '\\n_(TOC generated by Verb)_'});\n```\n\n### options.filter\n\nType: `Function`\n\nDefault: `undefined`\n\nParams:\n\n* `str` **{String}** the actual heading string\n* `ele` **{Objecct}** object of heading tokens\n* `arr` **{Array}** all of the headings objects\n\n**Example**\n\nFrom time to time, we might get junk like this in our TOC.\n\n```\n[.aaa([foo], ...) another bad heading](#-aaa--foo--------another-bad-heading)\n```\n\nUnless you like that kind of thing, you might want to filter these bad headings out.\n\n```js\nfunction removeJunk(str, ele, arr) {\n  return str.indexOf('...') === -1;\n}\n\nvar result = toc(str, {filter: removeJunk});\n//=> beautiful TOC\n```\n\n### options.slugify\n\nType: `Function`\n\nDefault: Basic non-word character replacement.\n\n**Example**\n\n```js\nvar str = toc('# Some Article', {slugify: require('uslug')});\n```\n\n### options.bullets\n\nType: `String|Array`\n\nDefault: `*`\n\nThe bullet to use for each item in the generated TOC. If passed as an array (`['*', '-', '+']`), the bullet point strings will be used based on the header depth.\n\n### options.maxdepth\n\nType: `Number`\n\nDefault: `6`\n\nUse headings whose depth is at most maxdepth.\n\n### options.firsth1\n\nType: `Boolean`\n\nDefault: `true`\n\nExclude the first h1-level heading in a file. For example, this prevents the first heading in a README from showing up in the TOC.\n\n### options.stripHeadingTags\n\nType: `Boolean`\n\nDefault: `true`\n\nStrip extraneous HTML tags from heading text before slugifying. This is similar to GitHub markdown behavior.\n\n## About\n\n### Related projects\n\n* [gfm-code-blocks](https://www.npmjs.com/package/gfm-code-blocks): Extract gfm (GitHub Flavored Markdown) fenced code blocks from a string. | [homepage](https://github.com/jonschlinkert/gfm-code-blocks \"Extract gfm (GitHub Flavored Markdown) fenced code blocks from a string.\")\n* [markdown-link](https://www.npmjs.com/package/markdown-link): Micro util for generating a single markdown link. | [homepage](https://github.com/jonschlinkert/markdown-link \"Micro util for generating a single markdown link.\")\n* [markdown-utils](https://www.npmjs.com/package/markdown-utils): Micro-utils for creating markdown snippets. | [homepage](https://github.com/jonschlinkert/markdown-utils \"Micro-utils for creating markdown snippets.\")\n* [pretty-remarkable](https://www.npmjs.com/package/pretty-remarkable): Plugin for prettifying markdown with Remarkable using custom renderer rules. | [homepage](https://github.com/jonschlinkert/pretty-remarkable \"Plugin for prettifying markdown with Remarkable using custom renderer rules.\")\n* [remarkable](https://www.npmjs.com/package/remarkable): Markdown parser, done right. 100% Commonmark support, extensions, syntax plugins, high speed - all inâ¦ [more](https://github.com/jonschlinkert/remarkable) | [homepage](https://github.com/jonschlinkert/remarkable \"Markdown parser, done right. 100% Commonmark support, extensions, syntax plugins, high speed - all in one.\")\n\n### Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n### Contributors\n\n| **Commits** | **Contributor** |  \n| --- | --- |  \n| 196 | [jonschlinkert](https://github.com/jonschlinkert) |  \n| 4   | [stefanwalther](https://github.com/stefanwalther) |  \n| 3   | [Marsup](https://github.com/Marsup) |  \n| 2   | [dvcrn](https://github.com/dvcrn) |  \n| 2   | [maxogden](https://github.com/maxogden) |  \n| 2   | [twang2218](https://github.com/twang2218) |  \n| 2   | [angrykoala](https://github.com/angrykoala) |  \n| 2   | [zeke](https://github.com/zeke) |  \n| 1   | [Vortex375](https://github.com/Vortex375) |  \n| 1   | [owzim](https://github.com/owzim) |  \n| 1   | [chendaniely](https://github.com/chendaniely) |  \n| 1   | [Daniel-Mietchen](https://github.com/Daniel-Mietchen) |  \n| 1   | [Feder1co5oave](https://github.com/Feder1co5oave) |  \n| 1   | [garygreen](https://github.com/garygreen) |  \n| 1   | [TehShrike](https://github.com/TehShrike) |  \n| 1   | [citizenmatt](https://github.com/citizenmatt) |  \n| 1   | [rafaelsteil](https://github.com/rafaelsteil) |  \n| 1   | [RichardBradley](https://github.com/RichardBradley) |  \n| 1   | [sethvincent](https://github.com/sethvincent) |  \n| 1   | [lu22do](https://github.com/lu22do) |  \n\n### Building docs\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n### Running tests\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n### Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright Â© 2017, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.6.0, on September 19, 2017._","readmeFilename":"README.md","_id":"markdown-toc@1.2.0","_shasum":"44a15606844490314afc0444483f9e7b1122c339","_resolved":"https://registry.npmjs.org/markdown-toc/-/markdown-toc-1.2.0.tgz","_from":"https://registry.npmjs.org/markdown-toc/-/markdown-toc-1.2.0.tgz"}