{"name":"wait-port","version":"0.2.2","description":"Utility to wait for a TCP port to open.","main":"./lib/wait-port.js","bin":{"wait-port":"./bin/wait-port.js"},"man":["./man/wait-port.1"],"scripts":{"lint":"eslint .","test":"DEBUG=wait-port nyc --report-dir 'artifacts/coverage' -x 'lib/**/*.spec.js' --reporter=html --reporter=text mocha --recursive -t 10000 'lib/**/*.spec.js'","test:watch":"DEBUG=wait-port mocha --watch --recursive -t 10000 'lib/**/*.spec.js'","report-coverage":"nyc report --reporter=text-lcov > ./artifacts/coverage/coverage.lcov && codecov","debug":"DEBUG=wait-port mocha --recursive --inspect --debug-brk 'lib/**/*.spec.js'"},"repository":{"type":"git","url":"git+https://github.com/dwmkerr/wait-port.git"},"author":{"name":"Dave Kerr"},"license":"MIT","bugs":{"url":"https://github.com/dwmkerr/wait-port/issues"},"homepage":"https://github.com/dwmkerr/wait-port#readme","devDependencies":{"codecov":"^2.2.0","eslint":"^3.19.0","istanbul":"^0.4.5","mocha":"^3.3.0","nyc":"^10.3.2","sinon":"^2.3.1"},"dependencies":{"chalk":"^1.1.3","commander":"^2.9.0","debug":"^2.6.6"},"readme":"# wait-port [![CircleCI](https://circleci.com/gh/dwmkerr/wait-port.svg?style=shield)](https://circleci.com/gh/dwmkerr/wait-port) [![codecov](https://codecov.io/gh/dwmkerr/wait-port/branch/master/graph/badge.svg)](https://codecov.io/gh/dwmkerr/wait-port) [![npm version](https://badge.fury.io/js/wait-port.svg)](https://badge.fury.io/js/wait-port)\n\nSimple binary to wait for a port to open. Useful when writing scripts which need to wait for a server to be availble, creating `docker-compose` commands which wait for servers to start and general server-side shenanigans. Can also wait for an HTTP endpoint to successfully respond.\n\n<img src=\"https://github.com/dwmkerr/wait-port/raw/master/docs/wait-port.gif\" alt=\"wait-port screenshot\" width=\"520px\" />\n\n- [Installation](#installation)\n- [Usage](#usage)\n  - [Parameters](#parameters)\n  - [Error Codes](#error-codes)\n- [API](#api)\n- [Developer Guide](#developer-guide)\n  - [Debugging](#debugging)\n  - [Testing](#testing)\n  - [Testing the CLI](#testing-the-cli)\n  - [Manpage](#manpage)\n  - [Releasing](#releasing)\n  - [Timeouts](#timeouts)\n\n# Installation\n\nInstall globally with `npm`:\n\n```\n$ npm install -g wait-port\n```\n\nIf installing locally, run the binary from the local node modules binary folder:\n\n```\n$ npm install wait-port\nwait-port@0.1.3\n\n$ ./node_modules/.bin/wait-port 8080\nWaiting for localhost:8080.....\nConnected!\n```\n\n# Usage\n\nTo wait indefinitely for a port to open, just use:\n\n```bash\n$ wait-port localhost:3000\n```\n\nTo wait for a port to open, but limit to a certain timeout, use:\n\n```bash\n$ wait-port -t 10000 localhost:3000\n```\n\nTo wait for an HTTP endpoint to respond with a 200 class status code, include the `http://` protocol:\n\n```bash\n$ wait-port http://:3000/healthcheck\n```\n\n### Parameters\n\nThe following parameters are accepted:\n\n| Parameter | Usage |\n|-----------|-------|\n| `<target>` | Required. The target to test for. Can be just a port, a colon and port (as one would use with [httpie](https://httpie.org/) or host and port. Examples: `8080`, `:3000`, `127.0.0.1:443`. |\n| `--output, -o`  | Optional. Output style to use. Can be `dots` (default) or `silent` (no output). |\n| `--timeout, -t` | Optional. Timeout (in milliseconds). |\n\n### Error Codes\n\nThe following error codes are returned:\n\n| Code | Meaning |\n|------|---------|\n| `0`  | The specified port on the host is accepting connections. |\n| `1`  | A timeout occured waiting for the port to open. |\n| `2`  | Un unknown error occured waiting for the port to open. The program cannot establish whether the port is open or not. |\n\n# API\n\nYou can use `wait-port` programmatically:\n\n```\nconst waitPort = require('wait-port');\n\nconst params = {\n  host: 'google.com',\n  port: 443,\n};\n\nwaitPort(params)\n  .then((open) => {\n    if (open) console.log('The port is now open!');\n    else console.log('The port did not open before the timeout...');\n  })\n  .catch((err) => {\n    console.err(`An unknown error occured while waiting for the port: ${err}`);\n  });\n```\n\nThe CLI is a very shallow wrapper around this function. The `params` object takes the following parameters:\n\n| CLI Parameter | API Parameter | Notes |\n|---------------|---------------|-------|\n| `<target>`      | `host`        | Optional. Defaults to `localhost`. |\n| `<target>`      | `port`        | Required. Port to wait for. |\n| `--output`      | `output`      | Optional. Defaults to `dots`. Output style to use. `silent` also accepted. |\n| `--timeout, -t` | `timeout` | Optional. Defaults to `0`. Timeout (in milliseconds). If `0`, then the operation will never timeout. |\n\n# Developer Guide\n\nThis module uses:\n\n| Name | Usage |\n| [`chalk`](https://github.com/chalk/chalk) | Terminal output styling. |\n| [`commander.js`](https://github.com/tj/commander.js) | Utility for building commandline apps. |\n| [`debug`](https://github.com/visionmedia/debug) | Utility for debug output. |\nR [`mocha`](https://mochajs.org/) / [`nyc`](https://github.com/istanbuljs/nyc) | Test runner / coverage. |\n\n## Debugging\n\nThis module use [`debug`](https://github.com/visionmedia/debug) for debug output. Set `DEBUG=wait-port` to see detailed diagnostic information:\n\n```bash\nDEBUG=wait-port wait-for -t 10000 localhost:6234\n```\n\nThis will also work for any code which uses the API.\n\n## Testing\n\nRun unit tests with `npm test`. Coverage is reported to `artifacts/coverage`.\n\nDebug unit tests with `npm run debug`. Add a `debugger` statement to the line you are interested in, and consider limiting scope with [`.only`](https://mochajs.org/#exclusive-tests).\n\nRun tests continuously, watching source with `npm run test:watch`.\n\n## Testing the CLI\n\nDon't install the package to test the CLI. Instead, in the project folder run `npm link`. Now go to whatever folder you want to use the module in and run `npm link wait-port`. It will symlink the package and binary. See [`npm link`](https://docs.npmjs.com/cli/link) for more details.\n\n### Manpage\n\nInstalling the CLI will install the manpage. The manpage is at [`./man/wait-port.1`](./man/wait-port.1). After updating the page, test it with `man ./man/wait-port.1` before publishing, as the format can be tricky to work with.\n\n## Releasing\n\nKick out a new release with:\n\n```bash\nnpm version patch # or minor/major\ngit push --tags\nnpm publish\n```\n\n## Timeouts\n\nThe timeout option for `waitPort` is used terminate attempts to open the socket *after* a certain amount of time has passed. Please note that operations can take significantly longer than the timeout. For example:\n\n```js\nconst promise = waitPort({ port: 9000, interval: 10000 }, 2000);\n```\n\nIn this case, the socket will only attempt to connect every ten seconds. So on the first iteration, the timeout is not reached, then another iteration will be scheduled for after ten seconds, meaning the timeout will happen eight seconds later than one might expect.\n\nThe `waitPort` promise may take up to `interval` milliseconds greater than `timeout` to resolve.\n","readmeFilename":"README.md","_id":"wait-port@0.2.2","_shasum":"d51a491e484a17bf75a947e711a2f012b4e6f2e3","_resolved":"https://registry.npmjs.org/wait-port/-/wait-port-0.2.2.tgz","_from":"https://registry.npmjs.org/wait-port/-/wait-port-0.2.2.tgz"}